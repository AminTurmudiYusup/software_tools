name: CI Pipeline for Running Two Bash Scripts and RISC-V

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-bash-scripts:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Install GCC (required for C compilation)
    - name: Install GCC
      run: sudo apt-get update && sudo apt-get install -y build-essential

    # Step 3: Ensure the scripts have execution permissions
    - name: Make Bash Scripts Executable
      run: |
        chmod +x 01.IO_flush/bash_script.sh
        chmod +x 02_MEM_OVERCOMMIT/over_commit.sh

    # Step 4: Run the Bash script from 01.IO_flush
    - name: Run Bash Script 1 (IO_flush)
      run: bash 01.IO_flush/bash_script.sh

    # Step 5: Upload Executable from 01.IO_flush as an Artifact
    - name: Upload Artifact 1
      uses: actions/upload-artifact@v3
      with:
        name: io_flush_executable
        path: 01.IO_flush/program  # Replace 'program' with the actual filename

    # Step 6: Run the Bash script from 02_MEM_OVERCOMMIT
    - name: Run Bash Script 2 (MEM_OVERCOMMIT)
      run: bash 02_MEM_OVERCOMMIT/over_commit.sh

    # Step 7: Upload Executable from 02_MEM_OVERCOMMIT as an Artifact
    - name: Upload Artifact 2
      uses: actions/upload-artifact@v3
      with:
        name: mem_overcommit_executable
        path: 02_MEM_OVERCOMMIT/overcommit  # Replace 'overcommit' with the actual filename

  build-and-test:
    runs-on: ubuntu-latest
    needs: run-bash-scripts

    steps:
    # Step 1: Check out the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Cache Dependencies (RISC-V Toolchain)
    - name: Cache RISC-V Toolchain
      id: cache-riscv
      uses: actions/cache@v3
      with:
        path: /opt/riscv
        key: ${{ runner.os }}-riscv-toolchain
        restore-keys: |
          ${{ runner.os }}-riscv-toolchain

    # Step 3: Install Dependencies (if cache not restored)
    - name: Install Dependencies
      if: steps.cache-riscv.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git flex bison libgmp-dev libmpc-dev libmpfr-dev texinfo

    # Step 4: Install CMake
    - name: Install CMake
      run: sudo apt-get install -y cmake

    # Step 5: Clone and Build RISC-V Toolchain (if not cached)
    - name: Build RISC-V Toolchain
      if: steps.cache-riscv.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/riscv-collab/riscv-gnu-toolchain.git
        cd riscv-gnu-toolchain
        ./configure --prefix=/opt/riscv --with-arch=rv64imac --with-abi=lp64
        make newlib -j$(nproc)

    # Step 6: Add RISC-V Toolchain to PATH
    - name: Add RISC-V Toolchain to PATH
      run: echo "PATH=/opt/riscv/bin:/usr/bin:/bin:\$PATH" >> $GITHUB_ENV

    # Step 7: Download Artifacts from Previous Job
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: io_flush_executable

    # Step 8: Build the Project with CMake
    - name: Configure and Build with CMake
      run: |
        mkdir -p build
        cd build
        cmake ../03.RISC-Z
        cmake --build .
      env:
        PATH: /opt/riscv/bin:/usr/bin:/bin:$PATH

    # Step 9: Run Unit Tests using QEMU
    - name: Run Unit Tests
      run: |
        cd build
        qemu-riscv64 ./tests
      env:
        PATH: /opt/riscv/bin:/usr/bin:/bin:$PATH
